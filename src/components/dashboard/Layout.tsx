import Image from "next/image";
import { AiFillHome, AiOutlineUnorderedList } from "react-icons/ai";
import { HiOutlineLogout } from "react-icons/hi";
import LayoutHeader from "./LayoutHeader";
import { useRouter } from "next/router";
import Link from "next/link";
import { ImLab } from "react-icons/im";
import { MdInventory } from "react-icons/md";
import { FaUserCircle } from "react-icons/fa";
import logo from "@/assets/img/rackdat_logo_blanco.png";
import { googleLogout } from "@react-oauth/google";
import { useEffect, useState } from "react";
import User from "@/assets/interfaces/users";
import axios from "axios";

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

const Opciones = [
  { name: "Inicio", url: "home", icon: <AiFillHome className="w-5 h-5" /> },
  {
    name: "Laboratorios",
    url: "laboratorios",
    icon: <ImLab className="w-5 h-5" />,
  },
  {
    name: "Solicitudes",
    url: "solicitudes",
    icon: <AiOutlineUnorderedList className="w-5 h-5" />,
  },
  { name: "Equipos", url: "items", icon: <MdInventory className="w-5 h-5" /> },
  {
    name: "User",
    url: "users",
    icon: <FaUserCircle className="w-5 h-5" />,
  },
];

export default function Layout({ children }: { children: React.ReactNode }) {
  const router = useRouter();
  const [userId, setUserId] = useState<number>(0);
  const [user, setUser] = useState<User | null | any>(null);

  const handleLogout = () => {
    localStorage.removeItem("user");
    localStorage.removeItem("id_tipo_usuario");
    router.push("/login");
    googleLogout();
  };

  const getUserId = (): number => {
    const userJSON = localStorage.getItem("user");
    if (userJSON) {
      const user = JSON.parse(userJSON);
      if (user && user.id) {
        return user.id;
      }
    }
    return 0;
  };

  const getUserInfo = async (id: number): Promise<User> => {
    try {
      const response = await axios.get(
        `https://rackdat.onrender.com/Usuarios/usuario/${id}`
      );
      return response.data;
    } catch (error) {
      // Manejar errores de la peticiÃ³n
      console.error(error);
      throw error;
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      const id = getUserId();
      setUserId(id);

      try {
        const userInfo = await getUserInfo(id);
        setUser(userInfo);
      } catch (error) {
        console.error(error);
      }
    };

    fetchData();
  }, []);

  if (!user) {
    return <div>Loading...</div>;
  }

  return (
    <div className="flex">
      <div className="w-[270px] h-screen flex flex-col align-center p-4 justify-between flex-shrink-0">
        {/* sidebar */}
        <div className="flex flex-col">
          <div className="self-center">
            <Image alt={"logo"} height={130} width={130} src={logo} />
          </div>
          <div className="flex flex-col gap-2 mt-10">
            {Opciones.map((opcion, index) => {
              if (opcion.name === "User" && user.id_tipo_usuario === 7) {
                return null;
              }
              return (
                <BarOptions
                  name={opcion.name}
                  url={opcion.url}
                  key={index}
                  icon={opcion.icon}
                />
              );
            })}
          </div>
        </div>
        {/* account */}
        <div className="flex p-2 rounded-md justify-around border-2 border-neutral-700">
          <Image
            src={user.imagen}
            alt="user image"
            width={100}
            height={100}
            className="rounded-full w-12 h-12 object-cover border-2 border-neutral-500"
          />

          <div className="flex flex-col justify-between py-1">
            <label className="text-white text-[14px]">
              {user.nombre} {user.apellido_pat}
            </label>
            <label className="text-neutral-400 text-[14px]">{user.clave}</label>
          </div>
          <div className="text-white flex justify-center items-center ">
            <div className="hover:bg-white p-[2px] hover:text-black duration-75 rounded cursor-pointer">
              <HiOutlineLogout className="w-6 h-6" onClick={handleLogout} />
            </div>
          </div>
        </div>
      </div>
      <div className="w-full h-screen rounded-l-2xl  bg-slate-100  overflow-y-auto">
        {children}
      </div>
    </div>
  );
}

type Props = {
  name: string;
  url: string;
  icon: any;
};

const BarOptions = (Props: Props) => {
  const router = useRouter();
  return (
    <Link
      href={`/dashboard/${Props.url}`}
      replace
      className="text-neutral-100 hover:text-white hover:bg-[#45444D] px-3 rounded-lg flex items-center gap-2 cursor-pointer duration-[200ms] flex-shrink-0 min-w-[34px] h-[34px] uppercase tracking-wider"
    >
      {Props.icon}
      <label className="text-[14px] cursor-pointer mt-1">{Props.name}</label>
    </Link>
  );
};
